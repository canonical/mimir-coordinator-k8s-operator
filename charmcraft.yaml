# This file configures Charmcraft.
# See https://juju.is/docs/sdk/charmcraft-config for guidance.

name: mimir-coordinator-k8s
type: charm
assumes:
  - k8s-api

links:
  documentation: https://discourse.charmhub.io/t/mimir-coordinator-index/10531

summary: Mimir coordinator
description: |
    Mimir coordinator.

platforms:
  ubuntu@22.04:amd64:

parts:
  charm:
    build-packages:
      - libffi-dev
      - libssl-dev
      - pkg-config
    build-snaps:
      - astral-uv
      - rustup
    charm-binary-python-packages:
      - pydantic>2.0
      # For v2.tls_certificates
      - cryptography
      - jsonschema
    override-build: |
      make requirements
      rustup default stable
      craftctl default
    # charm-requirements defaults to requirements.txt, but without setting it (counter-intuitive) 
    # the charm does not respect the requirements.txt when generated dynamically during build.
    charm-requirements: [requirements.txt]
    prime:
      - -*.charm
      - -.venv
      - -CONTRIBUTING.md
      - -Makefile
      - -pyproject.toml
      - -README.md
      - -tests/
      - -uv.lock
      - -*.egg-info

  cos-tool:
    plugin: dump
    source: https://github.com/canonical/cos-tool/releases/latest/download/cos-tool-${CRAFT_ARCH_BUILD_FOR}
    source-type: file
    permissions:
      - path: cos-tool-${CRAFT_ARCH_BUILD_FOR}
        mode: "500"
  mimirtool:
    plugin: dump
    source: https://github.com/grafana/mimir/releases/download/mimir-2.14.2/mimirtool-linux-${CRAFT_ARCH_BUILD_FOR}
    source-type: file
    organize:
      mimirtool-linux-${CRAFT_ARCH_BUILD_FOR}: mimirtool
    permissions:
      - path: mimirtool
        mode: "500"

containers:
  nginx:
    resource: nginx-image
  nginx-prometheus-exporter:
    resource: nginx-prometheus-exporter-image

resources:
  nginx-image:
    type: oci-image
    description: OCI image for nginx
    upstream-source: ubuntu/nginx:1.24-24.04_beta
  nginx-prometheus-exporter-image:
    type: oci-image
    description: OCI image for nginx-prometheus-exporter
    upstream-source: nginx/nginx-prometheus-exporter:1.1.0
#  agent-image:
#    type: oci-image
#    upstream-source: ghcr.io/canonical/grafana-agent:latest
#    description: OCI image for Grafana Agent

requires:
  s3:
    interface: s3
    limit: 1
    description: |
      The coordinator obtains and shares storage details with workers, enabling Mimir's access to an S3 bucket for data storage.

  logging-consumer:
    interface: loki_push_api
    description: |
      Forward workers' built-in logging rules to the external Loki
      (the coordinator, not the worker, owns all rule files).
      Obtain rules and Loki's API endpoint to later send them to the mimir ruler over another
      relation.

  ingress:
    interface: ingress
    limit: 1
    description: |
      Ingress-per-app, to load-balance across multiple units of the coordinator.

  certificates:
    interface: tls-certificates
    limit: 1
    description: |
      Certificate and key files for securing Mimir communications with TLS.

  charm-tracing:
    interface: tracing
    limit: 1
    description: |
      Enables sending charm traces to a distributed tracing backend such as Tempo.

  workload-tracing:
    interface: tracing
    limit: 1
    description: |
      Enables sending workload traces to a distributed tracing backend such as Tempo.

  alertmanager:
    interface: alertmanager_dispatch
    description: |
      Configure Mimir to utilize an external Alertmanager to notify the user when an alert is triggered.

  catalogue:
    interface: catalogue
    description: |
      Integration to help users discover Mimir's deployment.

provides:
  mimir-cluster:
    interface: mimir_cluster
    description: |
      The coordinator sends the Mimir configuration to the workers, obtaining
      the roles they are configured to take on and their addressing information.

  receive-remote-write:
    interface: prometheus_remote_write

  grafana-dashboards-provider:
    interface: grafana_dashboard
    description: |
      Forward workers' built-in dashboards to grafana
      (the coordinator, not the worker, owns all dashboards).

  grafana-source:
    interface: grafana_datasource

  self-metrics-endpoint:
    interface: prometheus_scrape
    description: |
      The coordinator provides scrape jobs for itself and for the workers.

  send-datasource:
    interface: grafana_datasource_exchange
    description: |
      Integration to share with other COS components this charm's datasources, and receive theirs.

  prometheus-api:
    interface: prometheus_api
    description: |
      The integration point for other charms to consume Mimir's Prometheus API, for example so they can query Mimir.
